
saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   .gitignore

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        Day1_Git notes and assignement.zip

no changes added to commit (use "git add" and/or "git commit -a")

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git diff
diff --git a/.gitignore b/.gitignore
index 0bc68a3..7a61f04 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,2 +1,3 @@
 .jar
-.class
\ No newline at end of file
+.class
+Day1_Git notes and assignement
\ No newline at end of file

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git add .

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   .gitignore
        new file:   Day1_Git notes and assignement.zip


saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git commit -m "WI4: gitignore , updated gitignore"
[master 242caca] WI4: gitignore , updated gitignore
 2 files changed, 2 insertions(+), 1 deletion(-)
 create mode 100644 Day1_Git notes and assignement.zip

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git status
On branch master
nothing to commit, working tree clean

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git log --oneline
242caca (HEAD -> master) WI4: gitignore , updated gitignore
b388ef4 WI3: .gitignore , creating gitignore file with .jar and .class
12b6d77 WI2: <file Name> , <task>
a7932e9 WI1: <file Name> , <task>

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git checkout -b newbug
Switched to a new branch 'newbug'

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (newbug)
$ git log --oneline
242caca (HEAD -> newbug, master) WI4: gitignore , updated gitignore
b388ef4 WI3: .gitignore , creating gitignore file with .jar and .class
12b6d77 WI2: <file Name> , <task>
a7932e9 WI1: <file Name> , <task>

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (newbug)
$ git status
On branch newbug
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   File.txt

no changes added to commit (use "git add" and/or "git commit -a")

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (newbug)
$ git diff
diff --git a/File.txt b/File.txt
index 063640f..d17102d 100644
--- a/File.txt
+++ b/File.txt
@@ -1,3 +1,4 @@
 Hello world
 Am I visible
-yes I am visible
\ No newline at end of file
+yes I am visible
+I am bug issue
\ No newline at end of file

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (newbug)
$ git commit -am "WI4: File , updated Bug"
[newbug 3167086] WI4: File , updated Bug
 1 file changed, 2 insertions(+), 1 deletion(-)

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (newbug)
$ git log --oneline
3167086 (HEAD -> newbug) WI4: File , updated Bug
242caca (master) WI4: gitignore , updated gitignore
b388ef4 WI3: .gitignore , creating gitignore file with .jar and .class
12b6d77 WI2: <file Name> , <task>
a7932e9 WI1: <file Name> , <task>

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (newbug)
$ git checkout master
Switched to branch 'master'

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git log --oneline
242caca (HEAD -> master) WI4: gitignore , updated gitignore
b388ef4 WI3: .gitignore , creating gitignore file with .jar and .class
12b6d77 WI2: <file Name> , <task>
a7932e9 WI1: <file Name> , <task>

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git commit -am "WI4: File , updated Bug 234"
[master d1b9718] WI4: File , updated Bug 234
 1 file changed, 3 insertions(+), 1 deletion(-)

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git log --oneline
d1b9718 (HEAD -> master) WI4: File , updated Bug 234
242caca WI4: gitignore , updated gitignore
b388ef4 WI3: .gitignore , creating gitignore file with .jar and .class
12b6d77 WI2: <file Name> , <task>
a7932e9 WI1: <file Name> , <task>

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git branch
* master
  newbug

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git merge newbug
Auto-merging File.txt
CONFLICT (content): Merge conflict in File.txt
Automatic merge failed; fix conflicts and then commit the result.

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master|MERGING)
$ git merge continue
error: Merging is not possible because you have unmerged files.
hint: Fix them up in the work tree, and then use 'git add/rm <file>'
hint: as appropriate to mark resolution and make a commit.
fatal: Exiting because of an unresolved conflict.

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master|MERGING)
$ git merge newbug
error: Merging is not possible because you have unmerged files.
hint: Fix them up in the work tree, and then use 'git add/rm <file>'
hint: as appropriate to mark resolution and make a commit.
fatal: Exiting because of an unresolved conflict.

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master|MERGING)
$ git merge continue
error: Merging is not possible because you have unmerged files.
hint: Fix them up in the work tree, and then use 'git add/rm <file>'
hint: as appropriate to mark resolution and make a commit.
fatal: Exiting because of an unresolved conflict.

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master|MERGING)
$ git merge newbug
error: Merging is not possible because you have unmerged files.
hint: Fix them up in the work tree, and then use 'git add/rm <file>'
hint: as appropriate to mark resolution and make a commit.
fatal: Exiting because of an unresolved conflict.

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master|MERGING)
$ git log --oneline
d1b9718 (HEAD -> master) WI4: File , updated Bug 234
242caca WI4: gitignore , updated gitignore
b388ef4 WI3: .gitignore , creating gitignore file with .jar and .class
12b6d77 WI2: <file Name> , <task>
a7932e9 WI1: <file Name> , <task>

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master|MERGING)
$ git branch
* master
  newbug

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master|MERGING)
$ git branch
* master
  newbug

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master|MERGING)
$ git merge newbug
error: Merging is not possible because you have unmerged files.
hint: Fix them up in the work tree, and then use 'git add/rm <file>'
hint: as appropriate to mark resolution and make a commit.
fatal: Exiting because of an unresolved conflict.

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master|MERGING)
$ git branch -d newbug
error: The branch 'newbug' is not fully merged.
If you are sure you want to delete it, run 'git branch -D newbug'.

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master|MERGING)
$ git branch -D newbug
Deleted branch newbug (was 3167086).

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master|MERGING)
$ git log --oneline
d1b9718 (HEAD -> master) WI4: File , updated Bug 234
242caca WI4: gitignore , updated gitignore
b388ef4 WI3: .gitignore , creating gitignore file with .jar and .class
12b6d77 WI2: <file Name> , <task>
a7932e9 WI1: <file Name> , <task>

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master|MERGING)
$ git checkout 242caca
error: you need to resolve your current index first
File.txt: needs merge

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master|MERGING)
$ git reset ^C

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master|MERGING)
$ git reset -hard 242caca
error: did you mean `--hard` (with two dashes)?

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master|MERGING)
$ git reset --hard 242caca
HEAD is now at 242caca WI4: gitignore , updated gitignore

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git log --oneline
242caca (HEAD -> master) WI4: gitignore , updated gitignore
b388ef4 WI3: .gitignore , creating gitignore file with .jar and .class
12b6d77 WI2: <file Name> , <task>
a7932e9 WI1: <file Name> , <task>

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git checkout -b enhancement
Switched to a new branch 'enhancement'

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (enhancement)
$ git branch
* enhancement
  master

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (enhancement)
$ git log --oneline
242caca (HEAD -> enhancement, master) WI4: gitignore , updated gitignore
b388ef4 WI3: .gitignore , creating gitignore file with .jar and .class
12b6d77 WI2: <file Name> , <task>
a7932e9 WI1: <file Name> , <task>

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (enhancement)
$ git status
On branch enhancement
nothing to commit, working tree clean

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (enhancement)
$ git status
On branch enhancement
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   File.txt

no changes added to commit (use "git add" and/or "git commit -a")

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (enhancement)
$ git commit -am "Enhancement: File , Added fullstop"
[enhancement c001568] Enhancement: File , Added fullstop
 1 file changed, 3 insertions(+), 1 deletion(-)

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (enhancement)
$ git log --oneline
c001568 (HEAD -> enhancement) Enhancement: File , Added fullstop
242caca (master) WI4: gitignore , updated gitignore
b388ef4 WI3: .gitignore , creating gitignore file with .jar and .class
12b6d77 WI2: <file Name> , <task>
a7932e9 WI1: <file Name> , <task>

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (enhancement)
$ git checkout master
Switched to branch 'master'

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   File.txt

no changes added to commit (use "git add" and/or "git commit -a")

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git commit -am "WI5: File , Added new code"
[master be345aa] WI5: File , Added new code
 1 file changed, 3 insertions(+), 1 deletion(-)

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git status
On branch master
nothing to commit, working tree clean

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git log --oneline
be345aa (HEAD -> master) WI5: File , Added new code
242caca WI4: gitignore , updated gitignore
b388ef4 WI3: .gitignore , creating gitignore file with .jar and .class
12b6d77 WI2: <file Name> , <task>
a7932e9 WI1: <file Name> , <task>

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git branch
  enhancement
* master

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git checkout enhancement
Switched to branch 'enhancement'

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (enhancement)
$ git status
On branch enhancement
nothing to commit, working tree clean

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (enhancement)
$ git log --oneline
c001568 (HEAD -> enhancement) Enhancement: File , Added fullstop
242caca WI4: gitignore , updated gitignore
b388ef4 WI3: .gitignore , creating gitignore file with .jar and .class
12b6d77 WI2: <file Name> , <task>
a7932e9 WI1: <file Name> , <task>

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (enhancement)
$ git branch --decorate --graph
error: unknown option `decorate'
usage: git branch [<options>] [-r | -a] [--merged] [--no-merged]
   or: git branch [<options>] [-l] [-f] <branch-name> [<start-point>]
   or: git branch [<options>] [-r] (-d | -D) <branch-name>...
   or: git branch [<options>] (-m | -M) [<old-branch>] <new-branch>
   or: git branch [<options>] (-c | -C) [<old-branch>] <new-branch>
   or: git branch [<options>] [-r | -a] [--points-at]
   or: git branch [<options>] [-r | -a] [--format]

Generic options
    -v, --verbose         show hash and subject, give twice for upstream branch
    -q, --quiet           suppress informational messages
    -t, --track           set up tracking mode (see git-pull(1))
    -u, --set-upstream-to <upstream>
                          change the upstream info
    --unset-upstream      unset the upstream info
    --color[=<when>]      use colored output
    -r, --remotes         act on remote-tracking branches
    --contains <commit>   print only branches that contain the commit
    --no-contains <commit>
                          print only branches that don't contain the commit
    --abbrev[=<n>]        use <n> digits to display object names

Specific git-branch actions:
    -a, --all             list both remote-tracking and local branches
    -d, --delete          delete fully merged branch
    -D                    delete branch (even if not merged)
    -m, --move            move/rename a branch and its reflog
    -M                    move/rename a branch, even if target exists
    -c, --copy            copy a branch and its reflog
    -C                    copy a branch, even if target exists
    -l, --list            list branch names
    --show-current        show current branch name
    --create-reflog       create the branch's reflog
    --edit-description    edit the description for the branch
    -f, --force           force creation, move/rename, deletion
    --merged <commit>     print only branches that are merged
    --no-merged <commit>  print only branches that are not merged
    --column[=<style>]    list branches in columns
    --sort <key>          field name to sort on
    --points-at <object>  print only branches of the object
    -i, --ignore-case     sorting and filtering are case insensitive
    --format <format>     format to use for the output


saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (enhancement)
$ git log --oneline --decorate --graph
* c001568 (HEAD -> enhancement) Enhancement: File , Added fullstop
* 242caca WI4: gitignore , updated gitignore
* b388ef4 WI3: .gitignore , creating gitignore file with .jar and .class
* 12b6d77 WI2: <file Name> , <task>
* a7932e9 WI1: <file Name> , <task>

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (enhancement)
$ git status
On branch enhancement
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   File.txt

no changes added to commit (use "git add" and/or "git commit -a")

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (enhancement)
$ git commit -am "Enhancement : File , Added new code"
[enhancement f349654] Enhancement : File , Added new code
 1 file changed, 1 insertion(+)

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (enhancement)
$ git log --oneline --decorate --graph
* f349654 (HEAD -> enhancement) Enhancement : File , Added new code
* c001568 Enhancement: File , Added fullstop
* 242caca WI4: gitignore , updated gitignore
* b388ef4 WI3: .gitignore , creating gitignore file with .jar and .class
* 12b6d77 WI2: <file Name> , <task>
* a7932e9 WI1: <file Name> , <task>

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (enhancement)
$ git rebase master
error: could not apply c001568... Enhancement: File , Added fullstop
Resolve all conflicts manually, mark them as resolved with
"git add/rm <conflicted_files>", then run "git rebase --continue".
You can instead skip this commit: run "git rebase --skip".
To abort and get back to the state before "git rebase", run "git rebase --abort".
Could not apply c001568... Enhancement: File , Added fullstop
Auto-merging File.txt
CONFLICT (content): Merge conflict in File.txt

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (enhancement|REBASE 1/2)
$ git status
interactive rebase in progress; onto be345aa
Last command done (1 command done):
   pick c001568 Enhancement: File , Added fullstop
Next command to do (1 remaining command):
   pick f349654 Enhancement : File , Added new code
  (use "git rebase --edit-todo" to view and edit)
You are currently rebasing branch 'enhancement' on 'be345aa'.
  (fix conflicts and then run "git rebase --continue")
  (use "git rebase --skip" to skip this patch)
  (use "git rebase --abort" to check out the original branch)

Unmerged paths:
  (use "git restore --staged <file>..." to unstage)
  (use "git add <file>..." to mark resolution)
        both modified:   File.txt

no changes added to commit (use "git add" and/or "git commit -a")

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (enhancement|REBASE 1/2)
$ git add .

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (enhancement|REBASE 1/2)
$ git status
interactive rebase in progress; onto be345aa
Last command done (1 command done):
   pick c001568 Enhancement: File , Added fullstop
Next command to do (1 remaining command):
   pick f349654 Enhancement : File , Added new code
  (use "git rebase --edit-todo" to view and edit)
You are currently rebasing branch 'enhancement' on 'be345aa'.
  (all conflicts fixed: run "git rebase --continue")

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   File.txt


saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (enhancement|REBASE 1/2)
$ git rebase --continue
hint: Waiting for your editor to close the file... unix2dos: converting file D:/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021/.git/COMMIT_EDITMSG to DOS format...
dos2unix: converting file D:/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021/.git/COMMIT_EDITMSG to Unix format...
[detached HEAD 36879c5] Enhancement: File , Added fullstop
 1 file changed, 3 insertions(+), 2 deletions(-)
Successfully rebased and updated refs/heads/enhancement.

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (enhancement)
$ git log --oneline --decorate --graph
* 76af755 (HEAD -> enhancement) Enhancement : File , Added new code
* 36879c5 Enhancement: File , Added fullstop
* be345aa (master) WI5: File , Added new code
* 242caca WI4: gitignore , updated gitignore
* b388ef4 WI3: .gitignore , creating gitignore file with .jar and .class
* 12b6d77 WI2: <file Name> , <task>
* a7932e9 WI1: <file Name> , <task>

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (enhancement)
$ git checkout master
Switched to branch 'master'

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git merge enhancement
Updating be345aa..76af755
Fast-forward
 File.txt | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git log --oneline --decorate --graph
* 76af755 (HEAD -> master, enhancement) Enhancement : File , Added new code
* 36879c5 Enhancement: File , Added fullstop
* be345aa WI5: File , Added new code
* 242caca WI4: gitignore , updated gitignore
* b388ef4 WI3: .gitignore , creating gitignore file with .jar and .class
* 12b6d77 WI2: <file Name> , <task>
* a7932e9 WI1: <file Name> , <task>

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git stash list

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git stash save CR1
No local changes to save

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git stash list

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git stash save CR1
Saved working directory and index state On master: CR1

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git stash list
stash@{0}: On master: CR1

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git stash list
stash@{0}: On master: CR1

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git stash save CR2
Saved working directory and index state On master: CR2

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git stash list
stash@{0}: On master: CR2
stash@{1}: On master: CR1

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git stash apply CR1
error: CR1 is not a valid reference

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git stash apply CR1^C

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git stash apply stash@{0}
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   File.txt

no changes added to commit (use "git add" and/or "git commit -a")

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git stash apply stash@{1}
error: Your local changes to the following files would be overwritten by merge:
        File.txt
Please commit your changes or stash them before you merge.
Aborting

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git stash apply stash@{0}
error: Your local changes to the following files would be overwritten by merge:
        File.txt
Please commit your changes or stash them before you merge.
Aborting

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git stash pop
error: Your local changes to the following files would be overwritten by merge:
        File.txt
Please commit your changes or stash them before you merge.
Aborting
The stash entry is kept in case you need it again.

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git stash list
stash@{0}: On master: CR2
stash@{1}: On master: CR1

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git checkout master
Already on 'master'
M       File.txt

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git stash list
stash@{0}: On master: CR2
stash@{1}: On master: CR1

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ git stash pop stash@{1}
error: Your local changes to the following files would be overwritten by merge:
        File.txt
Please commit your changes or stash them before you merge.
Aborting
The stash entry is kept in case you need it again.

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$ ^C

saurabh@SaurabhDesktop MINGW64 /d/saura/Documents/college/Training Assignment/Git/Day 1 03.02.2021 (master)
$
